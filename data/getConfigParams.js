const fs = require('fs');
const path = require('path');
const {
  getAppConfigParamByKey,
  getCountsAndDetailsToQuery,
  loadConfigParams,
  loadDictionary,
} = require('./dictionaryHelper');

const dictionary = loadDictionary();
const params = loadConfigParams();

/**
 * @param {string} value
 * @param {string} leftWrapper
 * @param {string} rightWrapper
 * @param {number} indent
 * @param {number} spaces
 */
function wrapString(value, leftWrapper, rightWrapper, indent, spaces) {
  const ending = spaces === 0 ? '' : '\n';
  const lWrapper = spaces === 0 ? leftWrapper : `${leftWrapper}\n`;
  const rWrapper = spaces === 0 ? rightWrapper : `${rightWrapper}`;
  return `${lWrapper}${value}${ending}${' '.repeat(indent)}${rWrapper}`;
}

/**
 * @param {*} value
 * @param {string[]} variables
 * @param {number} indent
 * @param {number} spaces
 * @returns {string}
 */
function recursiveStringify(value, variables, indent = 0, spaces = 0) {
  const ending = spaces === 0 ? '' : '\n';
  if (Array.isArray(value)) {
    const objs = value
      .map(
        (item) =>
          `${' '.repeat(indent + spaces)}${recursiveStringify(
            item,
            variables,
            indent + spaces,
            spaces
          )}`
      )
      .join(`,${ending}`);
    return wrapString(objs, '[', ']', indent, spaces);
  }

  if (typeof value === 'string') {
    let variable = null;
    for (const v of variables) if (value.includes(v)) variable = v;

    return variable === null
      ? JSON.stringify(value)
      : `\`${value.replace(`#${variable}#`, `\$\{${variable}\}`)}\``;
  }

  if (typeof value !== 'object') {
    // not an object, stringify using native function
    return JSON.stringify(value);
  }

  // Implements recursive object serialization according to JSON spec
  // but without quotes around the keys.
  const props = Object.keys(value)
    .map(
      (key) =>
        `${' '.repeat(indent + spaces)}${key}:${recursiveStringify(
          value[key],
          variables,
          indent + spaces,
          spaces
        )}`
    )
    .join(`,${ending}`);
  return wrapString(props, '{', '}', indent, spaces);
}

function isPlainObject(o) {
  return !!o && typeof o === 'object' && !Array.isArray(o);
}

/**
 * Build a configuration that does a 2-level merge
 * of the default and app configs excluding 'components'
 * @return 2-level merged app config
 */
function buildConfig() {
  const app = process.env.APP || 'default';
  const appConfig = params[app] || {};
  const defaultConfig = params.default || {};
  const result = { ...defaultConfig, ...appConfig };
  delete result.components;
  Object.keys(result).forEach((k) => {
    if (
      isPlainObject(result[k]) &&
      isPlainObject(defaultConfig[k]) &&
      isPlainObject(appConfig[k])
    )
      result[k] = { ...defaultConfig[k], ...appConfig[k] };
  });
  return result;
}

/** @param {{ plural: string }[]} items */
function getPluralNames(items) {
  const names = items.map((i) => i.plural);
  return names.length < 4 ? [...names, 'Files'] : names;
}

function buildComponents() {
  const defaultcomponents = params.default.components;
  const appComponents = getAppConfigParamByKey(params, 'components');

  const { boardCounts, chartCounts, projectDetails } =
    getCountsAndDetailsToQuery(params);
  const boardPluralNames = getPluralNames(boardCounts);
  const detailPluralNames = getPluralNames(projectDetails);

  return {
    ...defaultcomponents,
    ...appComponents,
    charts: {
      boardPluralNames,
      chartNames: chartCounts.map((i) => i.name),
      detailPluralNames,
      indexChartNames: boardPluralNames,
    },
  };
}

const gaTracking = getAppConfigParamByKey(params, 'gaTrackingId');
const components = buildComponents();
const config = buildConfig();
const requiredCerts = getAppConfigParamByKey(params, 'requiredCerts');
const consortiumList = dictionary.subject.properties.consortium.enum || [];
const template = `// This file was auto-generated by: node data/getConfigParams.js

const gaTracking = '${gaTracking}';
const hostname = typeof window !== 'undefined' ? \`\${window.location.protocol}//\${window.location.hostname}/\` : 'http://localhost/';
const components = ${recursiveStringify(components, ['hostname'], 0, 2)};
const config = ${JSON.stringify(config, null, '  ')};
const requiredCerts = [${requiredCerts.map((item) => `'${item}'`)}];
const consortiumList = ${JSON.stringify(consortiumList, null, 2)};
const dictionaryUrl = '${process.env.DICTIONARY_URL}';
module.exports = { components, config, gaTracking, requiredCerts, consortiumList, dictionaryUrl };
`;

const paramsPath = path.resolve(__dirname, '../src/params.js');
fs.writeFileSync(paramsPath, template);
